apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      env: {{ .Values.env }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        env: {{ .Values.env }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.name }}/{{ .Chart.Name }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http-server
              containerPort: {{ .Values.container.port }}
          readinessProbe:
            httpGet:
              path: /info
              port: {{ .Values.container.port }}
            initialDelaySeconds: 1
            periodSeconds: 20
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /info
              port: {{ .Values.container.port }}
            initialDelaySeconds: 1
            periodSeconds: 20
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 5
          env:
          - name: SECURITY_USER_NAME
            valueFrom:
              secretKeyRef:
                name: security-credentials
                key: security-user
          - name: SECURITY_USER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: security-credentials
                key: security-password
          - name: PORT
            value: "{{ .Values.container.port }}"
          - name: CASE_URL
            value: "http://$(CASE_SERVICE_HOST):$(CASE_SERVICE_PORT)"
          - name: CASE_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: CASE_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: COLLECTION_EXERCISE_URL
            value: "http://$(COLLECTION_EXERCISE_SERVICE_HOST):$(COLLECTION_EXERCISE_SERVICE_PORT)"
          - name: COLLECTION_EXERCISE_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: COLLECTION_EXERCISE_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: COLLECTION_INSTRUMENT_URL
            value: "http://$(COLLECTION_INSTRUMENT_SERVICE_HOST):$(COLLECTION_INSTRUMENT_SERVICE_PORT)"
          - name: COLLECTION_INSTRUMENT_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: COLLECTION_INSTRUMENT_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: CREATE_ACCOUNT_ADMIN_PASSWORD
            value: "{{ .Values.admin.createAccountPassword }}"
          - name: CREATE_ACCOUNT_EMAIL_TOKEN_EXPIRY
            value: "{{ .Values.admin.createccountEmailExpiry }}"
          {{- if .Values.analytics.enabled }}
          - name: GOOGLE_ANALYTICS_ID
            value: "{{ .Values.analytics.id }}"
          - name: GOOGLE_TAG_MANAGER
            value: "{{ .Values.analytics.tagManager }}"
          - name: GOOGLE_TAG_MANAGER_PROP
            value: "{{ .Values.analytics.tagManagerProp }}"
          {{- end }}
          - name: IAC_URL
            value: "http://$(IAC_SERVICE_HOST):$(IAC_SERVICE_PORT)"
          - name: IAC_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: IAC_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: PARTY_URL
            value: "http://$(PARTY_SERVICE_HOST):$(PARTY_SERVICE_PORT)"
          - name: PARTY_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: PARTY_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: REDIS_HOST
            {{- if .Values.database.managedRedis }}
            valueFrom:
                configMapKeyRef:
                    name: redis-config
                    key: redis-host
            {{- else }}
            value: "$(REDIS_MASTER_SERVICE_HOST)"
            {{- end }}
          - name: REDIS_PORT
            {{- if .Values.database.managedRedis }}
            valueFrom:
                configMapKeyRef:
                    name: redis-config
                    key: redis-port
            {{- else }}
            value: "$(REDIS_MASTER_SERVICE_PORT)"
            {{- end}}
          - name: REDIS_DB
            value: "3"
          - name: REPORT_URL
            value: "http://$(REPORTING_SERVICE_HOST):$(REPORTING_SERVICE_PORT)"
          - name: SAMPLE_URL
            value: "http://$(SAMPLE_SERVICE_HOST):$(SAMPLE_SERVICE_PORT)"
          - name: SAMPLE_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: SAMPLE_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: SEND_EMAIL_TO_GOV_NOTIFY
            value: "{{ .Values.sendEmailToGovNotify }}"
          - name: SURVEY_URL
            value: "http://$(SURVEY_SERVICE_HOST):$(SURVEY_SERVICE_PORT)"
          - name: SURVEY_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: SURVEY_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: SECURE_MESSAGE_URL
            value: "http://$(SECURE_MESSAGE_SERVICE_HOST):$(SECURE_MESSAGE_SERVICE_PORT)"
          - name: SECURE_MESSAGE_JWT_SECRET
            valueFrom:
              secretKeyRef:
                name: jwt-secret
                key: jwt-secret
          - name: UAA_SERVICE_URL
            value: "http://$(UAA_SERVICE_HOST):$(UAA_SERVICE_PORT)"
          - name: UAA_CLIENT_ID
            value: "{{ .Values.uaa.client_id }}"
          - name: UAA_CLIENT_SECRET
            value: "{{ .Values.uaa.client_secret }}"
          - name: ZIPKIN_DSN
            value: "http://$(ZIPKIN_SERVICE_HOST):$(ZIPKIN_SERVICE_PORT)/api/v1/spans"
          - name: ZIPKIN_SAMPLE_RATE
            value: "100"
          resources:
            {{ toYaml .Values.resources | nindent 12 }}
